#!/usr/bin/env python3
"""Script de configuration locale pour ConferenceFlow."""

import os
import sys
import subprocess
import secrets
from pathlib import Path

def print_header():
    print("üîß Configuration ConferenceFlow")
    print("=" * 50)
    print("Ce script g√©n√®re la configuration pour le d√©ploiement")
    print()

def generate_secure_password(length=16):
    """
    G√©n√®re un mot de passe s√©curis√©.
    
    Args:
        length (int): Longueur du mot de passe (d√©faut: 16)
    
    Returns:
        str: Mot de passe g√©n√©r√©
    """
    # Caract√®res autoris√©s (√©vite les caract√®res ambigus comme 0, O, l, I)
    letters = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
    digits = "23456789"
    special = "!@#$%&*+"
    
    # Assurer au moins un caract√®re de chaque type
    password = [
        secrets.choice(letters.upper()),  # Au moins 1 majuscule
        secrets.choice(letters.lower()),  # Au moins 1 minuscule  
        secrets.choice(digits),           # Au moins 1 chiffre
        secrets.choice(special)           # Au moins 1 caract√®re sp√©cial
    ]
    
    # Compl√©ter avec des caract√®res al√©atoires
    all_chars = letters + digits + special
    for _ in range(length - 4):
        password.append(secrets.choice(all_chars))
    
    # M√©langer le mot de passe
    import random
    random.SystemRandom().shuffle(password)
    
    return ''.join(password)

def get_user_input():
    """Demande les param√®tres √† l'utilisateur."""
    print("üìù Configuration des param√®tres")
    print("-" * 30)
    
    config = {}
    
    # Mode AVANT la base de donn√©es pour d√©terminer l'hostname
    print("\n‚öôÔ∏è  Mode de d√©ploiement :")
    is_production = input("Mode production ? [y/N]: ").strip().lower()
    config['flask_env'] = "production" if is_production in ['y', 'yes', 'o', 'oui'] else "development"
    config['flask_debug'] = "False" if is_production in ['y', 'yes', 'o', 'oui'] else "True"
    
    # D√©terminer l'hostname automatiquement
    if config['flask_env'] == 'production':
        default_host = "db"  # Docker Compose en production
        host_explanation = "Production (Docker Compose)"
    else:
        default_host = "localhost"  # D√©veloppement local
        host_explanation = "D√©veloppement (PostgreSQL local)"
    
    # Base de donn√©es - Configuration automatique
    print(f"\nüóÑÔ∏è  Configuration PostgreSQL ({host_explanation}) :")
    config['db_host'] = default_host
    print(f"‚úì Host PostgreSQL : {default_host}")
    config['db_port'] = input("Port PostgreSQL [5432]: ").strip() or "5432"
    
    # Adapter les noms par d√©faut selon l'environnement
    if config['flask_env'] == 'production':
        default_db_name = "conference_flow"
        default_db_user = "conference_user"
    else:
        default_db_name = "conferenceflow_dev"
        default_db_user = "postgres"
    
    config['db_name'] = input(f"Nom de la base [{default_db_name}]: ").strip() or default_db_name
    config['db_user'] = input(f"Utilisateur PostgreSQL [{default_db_user}]: ").strip() or default_db_user
    
    # G√©n√©ration automatique du mot de passe PostgreSQL
    config['db_password'] = generate_secure_password(16)
    print(f"‚úì Mot de passe PostgreSQL g√©n√©r√© : {config['db_password']}")
    
    # Admin
    print("\nüë§ Compte administrateur :")
    config['admin_email'] = input("Email admin [alice.admin@example.com]: ").strip() or "alice.admin@example.com"
    config['admin_first_name'] = input("Pr√©nom admin [Alice]: ").strip() or "Alice"
    config['admin_last_name'] = input("Nom admin [Administrator]: ").strip() or "Administrator"
    
    # G√©n√©rer ou demander mot de passe
    generate_pwd = input("G√©n√©rer un mot de passe s√©curis√© ? [Y/n]: ").strip().lower()
    if generate_pwd in ['', 'y', 'yes', 'o', 'oui']:
        config['admin_password'] = generate_secure_password()
        print(f"‚úì Mot de passe g√©n√©r√© : {config['admin_password']}")
    else:
        config['admin_password'] = input("Mot de passe admin : ").strip()
    
    # Email
    print("\nüìß Configuration email :")
    config['mail_server'] = input("Serveur SMTP [smtp.example.com]: ").strip() or "smtp.example.com"
    config['mail_port'] = input("Port SMTP [465]: ").strip() or "465"
    config['mail_username'] = input("Utilisateur SMTP [your_email@example.com]: ").strip() or "your_email@example.com"
    config['mail_password'] = input("Mot de passe SMTP [your_password]: ").strip() or "your_password"
    
    # Base URL
    print("\nüåê Configuration serveur :")
    default_url = "https://your-domain.com" if config['flask_env'] == 'production' else "http://localhost:5000"
    config['base_url'] = input(f"URL de base [{default_url}]: ").strip() or default_url
    
    return config

def create_env_file(config):
    """Cr√©e le fichier .env avec la configuration."""
    # G√©n√©rer une cl√© secr√®te
    secret_key = secrets.token_hex(32)


    database_url = f"postgresql://{config['db_user']}:{config['db_password']}@{config['db_host']}:{config['db_port']}/{config['db_name']}"
    
    
    env_content = f"""# Configuration Flask
SECRET_KEY={secret_key}
DATABASE_URL={database_url}
FLASK_ENV={config['flask_env']}
FLASK_DEBUG={config['flask_debug']}
BASE_URL={config['base_url']}

# Configuration Email
MAIL_USERNAME={config['mail_username']}
MAIL_PASSWORD={config['mail_password']}
MAIL_SERVER={config['mail_server']}
MAIL_PORT={config['mail_port']}
MAIL_USE_TLS=True

# Limites de fichiers
MAX_CONTENT_LENGTH=52428800

# Configuration Admin
ADMIN_EMAIL={config['admin_email']}
ADMIN_FIRST_NAME={config['admin_first_name']}
ADMIN_LAST_NAME={config['admin_last_name']}
ADMIN_PASSWORD={config['admin_password']}

# Configuration de s√©curit√©
SESSION_TIMEOUT_MINUTES=120
PASSWORD_MIN_LENGTH=8
MAX_LOGIN_ATTEMPTS=5

# Configuration HAL
HAL_API_URL=https://api.archives-ouvertes.fr
HAL_TEST_MODE=true

# Mode debug email
MAIL_DEBUG={config['flask_debug']}
MAIL_SUPPRESS_SEND=false
"""
    
    # V√©rifier si .env existe d√©j√†
    if os.path.exists('.env'):
        response = input("\n‚ö†Ô∏è  Le fichier .env existe d√©j√†. Remplacer ? [y/N]: ")
        if response.lower() not in ['y', 'yes', 'o', 'oui']:
            print("‚ùå Configuration annul√©e")
            return False
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    return True

def main():
    """Fonction principale."""
    print_header()
    
    # Demander la configuration
    config = get_user_input()
    
    # Cr√©er le fichier .env
    print("\nüìÑ Cr√©ation du fichier .env...")
    if not create_env_file(config):
        sys.exit(1)
    
    print("‚úì Fichier .env cr√©√© avec succ√®s")
    
    print("\nüéâ Configuration termin√©e !")
    print("\nüìã Prochaines √©tapes :")
    print("1. V√©rifiez le fichier .env cr√©√©")
    print("2. Pour d√©veloppement local : pip install -r requirements.txt && python run.py")
    print("3. Pour Docker : docker-compose up --build")
    print(f"\nüë§ Compte admin configur√© : {config['admin_email']}")
    if 'admin_password' in config:
        print(f"üîë Mot de passe : {config['admin_password']}")

if __name__ == "__main__":
    main()
