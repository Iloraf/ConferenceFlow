#!/usr/bin/env python3
"""Script d'initialisation de l'application pour Docker."""

import os
import sys
import subprocess
from pathlib import Path

def print_step(step, message):
    print(f"[INIT] √âTAPE {step}: {message}")

def install_dependencies():
    """Installe les d√©pendances Python."""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '--no-cache-dir', '-r', 'requirements.txt'
        ], check=True)
        print("‚úì D√©pendances install√©es")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Fichier requirements.txt non trouv√©")
        return False

def print_step(step, message):
    print(f"[INIT] √âTAPE {step}: {message}")

def create_directories():
    """Cr√©e la structure des dossiers n√©cessaires."""
    directories = [
        'app/static/uploads/articles',
        'app/static/uploads/wip', 
        'app/static/uploads/reviews', 
        'app/static/uploads/qr_codes',
        'app/static/icons',
        'instance',
        'logs'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("‚úì Dossiers cr√©√©s")

def validate_environment():
    """Valide la pr√©sence des variables d'environnement essentielles."""
    required_vars = [
        'SECRET_KEY',
        'DATABASE_URL', 
        'ADMIN_EMAIL',
        'ADMIN_PASSWORD'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        return False
    
    print("‚úì Variables d'environnement valid√©es")
    return True

def init_database():
    """Initialise la base de donn√©es."""
    try:
        from app import create_app, db
        
        app = create_app()
        with app.app_context():
            # V√©rifier si la base existe d√©j√†
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            if existing_tables:
                print(f"‚ÑπÔ∏è  Base de donn√©es d√©j√† initialis√©e ({len(existing_tables)} tables)")
            else:
                # Cr√©er toutes les tables
                db.create_all()
                print("‚úì Tables de base de donn√©es cr√©√©es")
            
            # Appliquer les migrations si elles existent
            import os
            if os.path.exists('migrations'):
                try:
                    from flask_migrate import upgrade
                    upgrade()
                    print("‚úì Migrations appliqu√©es")
                except Exception as e:
                    print(f"‚ÑπÔ∏è  Erreur migrations: {e}")
            else:
                print("‚ÑπÔ∏è  Pas de dossier migrations - tables cr√©√©es directement")
        
        print("‚úì Base de donn√©es pr√™te")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur initialisation base de donn√©es: {e}")
        return False

def create_admin():
    """Cr√©e l'utilisateur administrateur."""
    try:
        from app import create_app, db
        from app.models import User
        
        admin_email = os.getenv('ADMIN_EMAIL')
        admin_first_name = os.getenv('ADMIN_FIRST_NAME', 'Admin')
        admin_last_name = os.getenv('ADMIN_LAST_NAME', 'User')
        admin_password = os.getenv('ADMIN_PASSWORD')
        
        app = create_app()
        with app.app_context():
            # V√©rifier si l'admin existe d√©j√†
            existing_admin = User.query.filter_by(email=admin_email).first()
            
            if existing_admin:
                print(f"‚ÑπÔ∏è  Admin existe d√©j√†: {admin_email}")
                return True
            
            # Cr√©er l'admin
            admin = User(
                email=admin_email,
                first_name=admin_first_name,
                last_name=admin_last_name,
                is_admin=True
            )
            admin.set_password(admin_password)
            
            db.session.add(admin)
            db.session.commit()
            
            print(f"‚úì Admin cr√©√©: {admin_email}")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation admin: {e}")
        return False

def import_default_data():
    """Importe les donn√©es par d√©faut si disponibles."""
    try:
        # Pour l'instant, pas d'import automatique
        # Les affiliations peuvent √™tre import√©es plus tard via l'interface admin
        print("‚ÑπÔ∏è  Aucune donn√©e par d√©faut √† importer")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur import donn√©es par d√©faut: {e}")
        return True  # Ne pas faire √©chouer l'init pour √ßa

def main():
    """Fonction principale d'initialisation."""
    print("[INIT] üöÄ Initialisation de ConferenceFlow")
    print("[INIT] " + "=" * 50)
    
    # √âtape 1: Installation des d√©pendances
    print_step(1, "Installation des d√©pendances")
    if not install_dependencies():
        sys.exit(1)
    
    # √âtape 2: Validation de l'environnement
    print_step(2, "Validation de l'environnement")
    if not validate_environment():
        sys.exit(1)
    
    # √âtape 3: Cr√©ation des dossiers
    print_step(3, "Cr√©ation des dossiers")
    create_directories()
    
    # √âtape 4: Initialisation base de donn√©es
    print_step(4, "Initialisation de la base de donn√©es")
    if not init_database():
        sys.exit(1)
    
    # √âtape 5: Cr√©ation de l'admin
    print_step(5, "Cr√©ation de l'utilisateur admin")
    if not create_admin():
        sys.exit(1)
    
    # √âtape 6: Import des donn√©es par d√©faut
    print_step(6, "Import des donn√©es par d√©faut")
    import_default_data()
    
    print("[INIT] ‚úÖ Initialisation termin√©e avec succ√®s")
    print(f"[INIT] üë§ Admin: {os.getenv('ADMIN_EMAIL')}")

if __name__ == "__main__":
    main()
