# app/export_integration/doi_xml_generator.py
"""
Générateur XML DataCite pour les DOI
"""
from lxml import etree
from datetime import datetime
from flask import current_app

class DOIXMLGenerator:
    """Génère le XML DataCite pour l'enregistrement des DOI"""
    
    def generate_datacite_xml(self, communication):
        """Génère le XML DataCite selon le format maker_SFT"""
        
        # Configuration des namespaces
        xmlns = "http://datacite.org/schema/kernel-4"
        xsi = "http://www.w3.org/2001/XMLSchema-instance"
        schema_location = "http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4.3/metadata.xsd"
        
        # Élément racine
        root = etree.Element(
            f"{{{xmlns}}}resource",
            attrib={f"{{{xsi}}}schemaLocation": schema_location},
            nsmap={'xsi': xsi, None: xmlns}
        )
        
        # Commentaire de génération
        comment = etree.Comment('Generated by Conference Flow')
        root.append(comment)
        
        # DOI identifier
        identifier = etree.SubElement(root, "identifier", attrib={'identifierType': 'DOI'})
        identifier.text = communication.doi
        
        # Auteurs (creators)
        creators = etree.SubElement(root, "creators")
        for author in communication.authors:
            creator = etree.SubElement(creators, "creator")
            
            # Nom complet
            creator_name = etree.SubElement(creator, "creatorName", attrib={'nameType': 'Personal'})
            creator_name.text = f"{author.last_name}, {author.first_name}"
            
            # Prénom
            given_name = etree.SubElement(creator, "givenName")
            given_name.text = author.first_name
            
            # Nom de famille
            family_name = etree.SubElement(creator, "familyName")
            family_name.text = author.last_name
            
            # Affiliation (première affiliation)
            if author.affiliations:
                affiliation = etree.SubElement(creator, "affiliation")
                first_aff = author.affiliations[0]
                aff_text = first_aff.institution
                if first_aff.department:
                    aff_text += f", {first_aff.department}"
                affiliation.text = aff_text
        
        # Titre
        titles = etree.SubElement(root, "titles")
        title = etree.SubElement(titles, "title")
        title.text = communication.title
        
        # Éditeur
        publisher = etree.SubElement(root, "publisher")
        config = current_app.conference_config
        publisher.text = config.get('conference', {}).get('organizer', {}).get('name', 'Société Française de Thermique')
        
        # Année de publication
        pub_year = etree.SubElement(root, "publicationYear")
        year = config.get('conference', {}).get('year', datetime.now().year)
        pub_year.text = str(year)
        
        # Mots-clés (subjects)
        if communication.keywords:
            subjects = etree.SubElement(root, "subjects")
            keywords_list = [k.strip() for k in communication.keywords.split(',') if k.strip()]
            for keyword in keywords_list:
                subject = etree.SubElement(subjects, "subject")
                subject.text = keyword
        
        # Langue
        language = etree.SubElement(root, "language")
        language.text = "FR"
        
        # Type de ressource
        resource_type = etree.SubElement(root, "resourceType", 
                                       attrib={'resourceTypeGeneral': 'Text'})
        if communication.type == 'wip':
            resource_type.text = "Work in Progress"
        else:
            resource_type.text = "Acte de congrès"
        
        # Description (résumé)
        if communication.abstract:
            descriptions = etree.SubElement(root, "descriptions")
            description = etree.SubElement(descriptions, "description",
                                         attrib={'descriptionType': 'Abstract'})
            description.text = communication.abstract
        
        # URL publique (HAL si disponible)
        if communication.public_url:
            alternate_ids = etree.SubElement(root, "alternateIdentifiers")
            alt_id = etree.SubElement(alternate_ids, "alternateIdentifier",
                                    attrib={'alternateIdentifierType': 'URL'})
            alt_id.text = communication.public_url
        
        return etree.tostring(root, pretty_print=True, encoding='unicode')
