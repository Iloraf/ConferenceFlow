// Conference Flow PWA - Gestion compl√®te PWA et notifications push
class ConferenceFlowPWA {
  constructor() {
    this.isOnline = navigator.onLine;
    this.installPrompt = null;
    this.registration = null;
    this.vapidPublicKey = null;
    this.notificationPermission = Notification.permission;
    
    // Remplacer localStorage par variables en m√©moire
    this.userPreferences = {
      eventReminders: true,
      sessionReminders: true,
      adminBroadcasts: true
    };
    this.cachedEvents = [];
    this.lastEventSync = null;
    
    this.init();
  }
  
  async init() {
    console.log('üì± Initialisation Conference Flow PWA');
    
    // R√©cup√©rer la cl√© publique VAPID depuis le serveur
    await this.loadVapidPublicKey();
    
    // Enregistrer le Service Worker
    if ('serviceWorker' in navigator) {
      try {
        this.registration = await navigator.serviceWorker.register('/static/sw.js');
        console.log('‚úÖ Service Worker enregistr√©');
        
        // √âcouter les mises √† jour
        this.registration.addEventListener('updatefound', () => {
          this.showUpdateAvailable();
        });
        
        // √âcouter les messages du Service Worker
        navigator.serviceWorker.addEventListener('message', (event) => {
          this.handleServiceWorkerMessage(event);
        });
        
      } catch (error) {
        console.error('‚ùå Erreur Service Worker:', error);
      }
    }
    
    // G√©rer l'installation
    this.setupInstallPrompt();
    
    // G√©rer le statut r√©seau
    this.setupNetworkStatus();
    
    // Initialiser les notifications
    await this.setupNotifications();
    
    // Initialiser l'interface utilisateur
    this.setupUI();
    
    // Synchroniser les √©v√©nements du programme
    await this.syncProgramEvents();
  }

  // === GESTION CL√âS VAPID ===
  async loadVapidPublicKey() {
    console.log('üîë Chargement cl√© VAPID publique...');
    
    try {
      const response = await fetch('/api/vapid-public-key', {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });
      
      console.log('üì® R√©ponse API VAPID:', response.status, response.statusText);
      
      if (!response.ok) {
        if (response.status === 503) {
          console.warn('‚ö†Ô∏è Notifications push non configur√©es sur le serveur');
          this.showNotificationStatus('Notifications push non configur√©es', 'warning');
        } else {
          console.error('‚ùå Erreur serveur cl√© VAPID:', response.status);
          this.showNotificationStatus('Erreur chargement configuration notifications', 'danger');
        }
        return;
      }
      
      const data = await response.json();
      console.log('üì® Donn√©es re√ßues:', {
        hasPublicKey: !!data.public_key,
        hasPublicKeyAlt: !!data.publicKey,
        status: data.status,
        error: data.error
      });
      
      if (data.error) {
        console.warn('‚ö†Ô∏è Erreur dans r√©ponse VAPID:', data.error);
        this.showNotificationStatus(data.error, 'warning');
        return;
      }
      
      // Utiliser public_key en priorit√©, puis publicKey pour compatibilit√©
      this.vapidPublicKey = data.public_key || data.publicKey;
      
      if (this.vapidPublicKey) {
        console.log('‚úÖ Cl√© VAPID publique charg√©e');
        console.log('üîë Longueur cl√©:', this.vapidPublicKey.length);
        
        // Valider le format de la cl√©
        if (this.isValidVapidKey(this.vapidPublicKey)) {
          console.log('‚úÖ Format cl√© VAPID valide');
        } else {
          console.error('‚ùå Format cl√© VAPID invalide');
          this.vapidPublicKey = null;
          this.showNotificationStatus('Format cl√© VAPID invalide', 'danger');
        }
      } else {
        console.warn('‚ö†Ô∏è Aucune cl√© VAPID publique re√ßue');
        this.showNotificationStatus('Cl√© VAPID manquante', 'warning');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur chargement cl√© VAPID:', error);
      this.showNotificationStatus('Erreur connexion serveur pour notifications', 'danger');
    }
  }

  // Validation format cl√© VAPID
  isValidVapidKey(key) {
    if (!key || typeof key !== 'string') {
      return false;
    }
    
    // Une cl√© VAPID publique en base64url fait g√©n√©ralement 87 caract√®res
    const base64urlPattern = /^[A-Za-z0-9_-]+$/;
    return key.length >= 80 && key.length <= 90 && base64urlPattern.test(key);
  }
  
  // === GESTION INSTALLATION PWA ===
  setupInstallPrompt() {
    console.log('üîß Configuration du prompt d\'installation...');
    
    window.addEventListener('beforeinstallprompt', (event) => {
      console.log('üéØ beforeinstallprompt √©v√©nement d√©clench√© !');
      event.preventDefault();
      this.installPrompt = event;
      this.showInstallButton();
      
      console.log('üì± Prompt d\'installation sauvegard√©:', !!this.installPrompt);
    });
    
    window.addEventListener('appinstalled', (event) => {
      console.log('‚úÖ Application install√©e !');
      this.hideInstallButton();
      this.showNotificationStatus('Conference Flow install√©e avec succ√®s !', 'success');
      this.installPrompt = null;
    });
  }

  async installApp() {
    if (!this.installPrompt) {
      console.warn('‚ö†Ô∏è Pas de prompt d\'installation disponible');
      return;
    }

    try {
      const result = await this.installPrompt.prompt();
      console.log('üì± R√©sultat installation:', result.outcome);
      
      if (result.outcome === 'accepted') {
        console.log('‚úÖ Utilisateur a accept√© l\'installation');
      } else {
        console.log('‚ùå Utilisateur a refus√© l\'installation');
      }
      
      this.installPrompt = null;
      this.hideInstallButton();
      
    } catch (error) {
      console.error('‚ùå Erreur installation:', error);
    }
  }

  // === GESTION SERVICE WORKER ===
  async waitForServiceWorkerReady() {
    console.log('‚è≥ Attente service worker...');
    
    if (!this.registration) {
      throw new Error('Aucun service worker enregistr√©');
    }
    
    // Attendre que le SW soit dans l'√©tat correct
    if (this.registration.installing) {
      console.log('üì¶ Service worker en cours d\'installation...');
      await new Promise((resolve) => {
        this.registration.installing.addEventListener('statechange', () => {
          if (this.registration.installing.state === 'installed') {
            console.log('‚úÖ Service worker install√©');
            resolve();
          }
        });
      });
    }
    
    if (this.registration.waiting) {
      console.log('‚è≥ Service worker en attente...');
      // Activer le nouveau service worker
      this.registration.waiting.postMessage({ action: 'skipWaiting' });
      await new Promise((resolve) => {
        navigator.serviceWorker.addEventListener('controllerchange', resolve, { once: true });
      });
    }
    
    // S'assurer qu'on a un service worker actif
    await navigator.serviceWorker.ready;
    
    if (!this.registration.active) {
      throw new Error('Service worker non actif');
    }
    
    console.log('‚úÖ Service worker pr√™t pour abonnement push');
    return true;
  }

  // === GESTION NOTIFICATIONS ===
  async setupNotifications() {
    console.log('üîî Configuration des notifications...');
    
    if (!('Notification' in window)) {
      console.warn('‚ö†Ô∏è Notifications non support√©es');
      return;
    }

    // V√©rifier si l'utilisateur a d√©j√† donn√© la permission
    if (this.notificationPermission === 'granted') {
      console.log('‚úÖ Permission notifications d√©j√† accord√©e');
      // Configurer l'abonnement push si pas encore fait
      if (this.registration && this.vapidPublicKey) {
        await this.ensurePushSubscription();
      }
    } else if (this.notificationPermission === 'default') {
      console.log('‚ùî Permission notifications pas encore demand√©e');
      this.showNotificationPrompt();
    } else {
      console.log('‚ùå Notifications refus√©es');
    }
  }

  async requestNotificationPermission() {
    console.log('üîî === D√âMARRAGE DEMANDE PERMISSION ===');
    
    // Faire un diagnostic complet d'abord
    await this.diagnosticPushState();
    
    // V√©rifier le support du navigateur
    if (!('Notification' in window)) {
      console.warn('‚ö†Ô∏è Notifications non support√©es');
      this.showNotificationStatus('Notifications non support√©es par ce navigateur', 'warning');
      return false;
    }

    try {
      console.log('üîî Demande de permission pour les notifications...');
      const permission = await Notification.requestPermission();
      this.notificationPermission = permission;
      
      console.log('üìã Permission obtenue:', permission);
      
      if (permission === 'granted') {
        console.log('‚úÖ Notifications autoris√©es par l\'utilisateur');
        
        // Montrer une notification de test
        this.showNotification('Notifications activ√©es ! Vous recevrez des rappels pour les sessions.');
        
        // S'assurer que le service worker est pr√™t
        try {
          await this.waitForServiceWorkerReady();
          console.log('‚úÖ Service worker valid√©');
        } catch (error) {
          console.error('‚ùå Service worker non pr√™t:', error);
          this.showNotificationStatus(`Service worker: ${error.message}`, 'danger');
          return false;
        }
        
        // Cr√©er l'abonnement push
        console.log('üöÄ Cr√©ation abonnement push...');
        const subscriptionSuccess = await this.ensurePushSubscription();
        
        if (subscriptionSuccess) {
          this.hideNotificationPrompt();
          console.log('‚úÖ === CONFIGURATION PUSH TERMIN√âE AVEC SUCC√àS ===');
          return true;
        } else {
          console.error('‚ùå √âchec configuration abonnement push');
          return false;
        }
        
      } else if (permission === 'denied') {
        console.log('‚ùå Notifications refus√©es par l\'utilisateur');
        this.showNotificationStatus(
          'Notifications d√©sactiv√©es. Vous pouvez les r√©activer dans les param√®tres du navigateur.', 
          'warning'
        );
        return false;
        
      } else {
        console.log('‚è∏Ô∏è Permission en attente');
        this.showNotificationStatus('Permission en attente. Cliquez sur "Autoriser" dans la barre d\'adresse.', 'info');
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå Erreur demande permission:', error);
      this.showNotificationStatus(`Erreur: ${error.message}`, 'danger');
      return false;
    }
  }

  async ensurePushSubscription() {
    console.log('üîî D√©marrage ensurePushSubscription...');
    
    // V√©rifications pr√©alables plus robustes
    if (!this.registration) {
      console.error('‚ùå Aucun service worker enregistr√©');
      this.showNotificationStatus('Service Worker non disponible', 'danger');
      return false;
    }
    
    if (!this.vapidPublicKey) {
      console.error('‚ùå Cl√© VAPID publique non disponible');
      this.showNotificationStatus('Configuration VAPID manquante', 'danger');
      return false;
    }
    
    // Attendre que le service worker soit pr√™t
    await navigator.serviceWorker.ready;
    console.log('‚úÖ Service Worker pr√™t');

    try {
      // V√©rifier l'√©tat actuel de l'abonnement
      let subscription = await this.registration.pushManager.getSubscription();
      console.log('üì± √âtat abonnement existant:', !!subscription);
      
      if (subscription) {
        // V√©rifier que l'abonnement est encore valide
        console.log('üîç V√©rification validit√© abonnement existant...');
        try {
          // Test de validit√© en tentant une requ√™te vers l'endpoint
          const testResponse = await fetch(subscription.endpoint, { method: 'HEAD' });
          console.log('üîç Test endpoint:', testResponse.status);
        } catch (error) {
          console.warn('‚ö†Ô∏è Abonnement peut-√™tre invalide:', error.message);
          // Si l'endpoint ne r√©pond pas, on peut garder l'abonnement quand m√™me
        }
      }
      
      if (!subscription) {
        console.log('üì± Cr√©ation d\'un nouvel abonnement push...');
        
        // S'assurer que le service worker est actif
        if (this.registration.installing) {
          console.log('‚è≥ Attente installation SW...');
          await new Promise((resolve) => {
            this.registration.installing.onstatechange = () => {
              if (this.registration.installing.state === 'installed') {
                resolve();
              }
            };
          });
        }
        
        // Cr√©er l'abonnement
        subscription = await this.registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: this.urlB64ToUint8Array(this.vapidPublicKey)
        });
        console.log('‚úÖ Nouvel abonnement push cr√©√©');
      } else {
        console.log('‚úÖ Abonnement push existant valid√©');
      }
      
      // Sauvegarder l'abonnement sur le serveur
      const saveSuccess = await this.savePushSubscription(subscription);
      
      if (saveSuccess) {
        console.log('‚úÖ Abonnement sauvegard√© sur le serveur');
        this.showNotificationStatus('Notifications configur√©es avec succ√®s', 'success');
        return true;
      } else {
        throw new Error('√âchec sauvegarde serveur');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur abonnement push:', error);
      
      let errorMessage = 'Erreur configuration des notifications';
      if (error.name === 'NotSupportedError') {
        errorMessage = 'Notifications push non support√©es sur cet appareil';
      } else if (error.name === 'NotAllowedError') {
        errorMessage = 'Permission requise pour les notifications';
      } else if (error.message.includes('network')) {
        errorMessage = 'Probl√®me de connexion r√©seau';
      }
      
      this.showNotificationStatus(errorMessage, 'danger');
      return false;
    }
  }

  async savePushSubscription(subscription) {
    console.log('üíæ Sauvegarde abonnement push...');
    
    if (!subscription) {
      console.error('‚ùå Pas d\'abonnement √† sauvegarder');
      return false;
    }
    
    try {
      // Pr√©parer les donn√©es √† envoyer
      const subscriptionData = {
        subscription: subscription.toJSON(),
        userAgent: navigator.userAgent,
        preferences: this.userPreferences,
        timestamp: new Date().toISOString()
      };
      
      console.log('üì§ Envoi donn√©es abonnement...', {
        endpoint: subscription.endpoint ? 'OK' : 'MANQUANT',
        keys: subscription.toJSON().keys ? 'OK' : 'MANQUANT'
      });
      
      const response = await fetch('/api/push-subscription', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(subscriptionData)
      });
      
      console.log('üì® R√©ponse serveur:', response.status, response.statusText);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur serveur:', response.status, errorText);
        
        // Messages d'erreur sp√©cifiques
        if (response.status === 401) {
          throw new Error('Non authentifi√© - reconnectez-vous');
        } else if (response.status === 400) {
          throw new Error('Donn√©es d\'abonnement invalides');
        } else if (response.status === 503) {
          throw new Error('Service de notifications non configur√©');
        } else {
          throw new Error(`Erreur serveur: ${response.status} - ${errorText}`);
        }
      }
      
      const responseData = await response.json();
      console.log('‚úÖ R√©ponse serveur:', responseData);
      
      if (responseData.success) {
        console.log('‚úÖ Abonnement push sauvegard√© avec succ√®s');
        return true;
      } else {
        throw new Error(responseData.message || '√âchec sauvegarde inconnue');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde abonnement:', error);
      
      // Afficher l'erreur √† l'utilisateur
      this.showNotificationStatus(`Erreur sauvegarde: ${error.message}`, 'danger');
      
      return false;
    }
  }

  // === DIAGNOSTIC ET DEBUG ===
  async diagnosticPushState() {
    console.log('üîç === DIAGNOSTIC √âTAT PUSH ===');
    
    // V√©rifier le support du navigateur
    const browserSupport = {
      serviceWorker: 'serviceWorker' in navigator,
      pushManager: 'PushManager' in window,
      notification: 'Notification' in window
    };
    console.log('üåê Support navigateur:', browserSupport);
    
    // √âtat des permissions
    const permission = Notification.permission;
    console.log('üîê Permission notifications:', permission);
    
    // √âtat du service worker
    if (this.registration) {
      console.log('üì± Service Worker:', {
        installing: !!this.registration.installing,
        waiting: !!this.registration.waiting,
        active: !!this.registration.active,
        scope: this.registration.scope
      });
      
      // √âtat de l'abonnement push
      try {
        const subscription = await this.registration.pushManager.getSubscription();
        console.log('üì° Abonnement actuel:', {
          exists: !!subscription,
          endpoint: subscription ? subscription.endpoint.substring(0, 50) + '...' : null,
          hasKeys: subscription ? !!(subscription.toJSON().keys) : false
        });
      } catch (error) {
        console.error('‚ùå Erreur lecture abonnement:', error);
      }
    } else {
      console.log('‚ùå Aucun service worker enregistr√©');
    }
    
    // √âtat de la cl√© VAPID
    console.log('üîë Cl√© VAPID:', {
      loaded: !!this.vapidPublicKey,
      length: this.vapidPublicKey ? this.vapidPublicKey.length : 0,
      valid: this.vapidPublicKey ? this.isValidVapidKey(this.vapidPublicKey) : false
    });
    
    console.log('üîç === FIN DIAGNOSTIC ===');
  }

  // === GESTION R√âSEAU ===
  setupNetworkStatus() {
    console.log('üåê Configuration statut r√©seau...');
    
    // √âcouter les changements de connectivit√©
    window.addEventListener('online', () => {
      console.log('üåê Connexion r√©tablie');
      this.isOnline = true;
      this.showNetworkStatus('Connexion r√©tablie', 'success', 3000);
      this.syncProgramEvents();
    });

    window.addEventListener('offline', () => {
      console.log('üì± Mode hors ligne');
      this.isOnline = false;
      this.showNetworkStatus('Mode hors ligne', 'warning');
    });

    // Afficher le statut initial si hors ligne
    if (!this.isOnline) {
      this.showNetworkStatus('Mode hors ligne', 'warning');
    }
  }

  // === SYNCHRONISATION DONN√âES ===
  async syncProgramEvents() {
    if (!this.isOnline) {
      console.log('‚ö†Ô∏è Hors ligne - synchronisation des √©v√©nements report√©e');
      return;
    }

    try {
      const response = await fetch('/api/program-events');
      if (response.ok) {
        const events = await response.json();
        this.storeEventsInMemory(events);
        console.log(`‚úÖ ${events.length} √©v√©nements du programme synchronis√©s`);
      } else {
        console.warn('‚ö†Ô∏è Erreur synchronisation √©v√©nements:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Erreur synchronisation √©v√©nements:', error);
    }
  }

  storeEventsInMemory(events) {
    // Remplacer localStorage par stockage en m√©moire
    this.cachedEvents = events;
    this.lastEventSync = Date.now();
    console.log('üíæ √âv√©nements stock√©s en m√©moire:', events.length);
  }

  getStoredEvents() {
    return this.cachedEvents || [];
  }

  // === INTERFACE UTILISATEUR ===
  setupUI() {
    this.createUIElements();
    this.attachEventListeners();
    this.updateUI();
  }

  createUIElements() {
    // Bouton d'installation
    let installBtn = document.getElementById('install-btn');
    if (!installBtn) {
      installBtn = document.createElement('button');
      installBtn.id = 'install-btn';
      installBtn.className = 'btn btn-primary pwa-install-btn';
      installBtn.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1050;
        display: none;
        border-radius: 25px;
        padding: 12px 20px;
        box-shadow: 0 4px 12px rgba(0,123,255,0.4);
        font-size: 14px;
        font-weight: 500;
      `;
      installBtn.innerHTML = '<i class="fas fa-download"></i> Installer Conference Flow';
      document.body.appendChild(installBtn);
      console.log('üîß Bouton d\'installation cr√©√©');
    }

    // Bouton de mise √† jour
    let updateBtn = document.getElementById('update-btn');
    if (!updateBtn) {
      updateBtn = document.createElement('button');
      updateBtn.id = 'update-btn';
      updateBtn.className = 'btn btn-warning pwa-update-btn';
      updateBtn.style.cssText = `
        position: fixed;
        bottom: 20px;
        left: 20px;
        z-index: 1050;
        display: none;
        border-radius: 25px;
        padding: 12px 20px;
        box-shadow: 0 4px 12px rgba(255,193,7,0.4);
      `;
      updateBtn.innerHTML = '<i class="fas fa-sync"></i> Mettre √† jour';
      document.body.appendChild(updateBtn);
    }

    // Status r√©seau
    let networkStatus = document.getElementById('network-status');
    if (!networkStatus) {
      networkStatus = document.createElement('div');
      networkStatus.id = 'network-status';
      networkStatus.className = 'network-status alert';
      networkStatus.style.cssText = `
        position: fixed;
        top: 1rem;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1052;
        display: none;
        min-width: 200px;
        text-align: center;
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        font-weight: 500;
      `;
      document.body.appendChild(networkStatus);
    }
  }

  attachEventListeners() {
    // Installation
    const installBtn = document.getElementById('install-btn');
    if (installBtn) {
      installBtn.addEventListener('click', () => {
        this.installApp();
      });
    }

    // Mise √† jour
    const updateBtn = document.getElementById('update-btn');
    if (updateBtn) {
      updateBtn.addEventListener('click', () => {
        window.location.reload();
      });
    }
  }

  updateUI() {
    // Mettre √† jour l'affichage bas√© sur l'√©tat actuel
    if (!this.isOnline) {
      this.showNetworkStatus('Mode hors ligne', 'warning');
    }
  }

  // === M√âTHODES UTILITAIRES UI ===
  showInstallButton() {
    const installBtn = document.getElementById('install-btn');
    if (installBtn) {
      installBtn.style.display = 'block';
      console.log('üì± Bouton d\'installation affich√©');
    }
  }

  hideInstallButton() {
    const installBtn = document.getElementById('install-btn');
    if (installBtn) {
      installBtn.style.display = 'none';
    }
  }

  showUpdateAvailable() {
    const updateBtn = document.getElementById('update-btn');
    if (updateBtn) {
      updateBtn.style.display = 'block';
      this.showNotificationStatus('Mise √† jour disponible !', 'info');
    }
  }

  showNotificationPrompt() {
    // Simple prompt int√©gr√©
    const hasPrompt = document.getElementById('notification-prompt');
    if (!hasPrompt) {
      const promptDiv = document.createElement('div');
      promptDiv.id = 'notification-prompt';
      promptDiv.className = 'notification-prompt';
      promptDiv.style.cssText = `
        position: fixed;
        bottom: 1rem;
        left: 1rem;
        right: 1rem;
        z-index: 1049;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      `;
      
      promptDiv.innerHTML = `
        <h6><i class="fas fa-bell"></i> Activer les notifications</h6>
        <p class="mb-3">Recevez des rappels pour vos sessions et √©v√©nements.</p>
        <button class="btn btn-primary btn-sm me-2" onclick="window.conferenceFlowPWA.requestNotificationPermission()">
          Activer
        </button>
        <button class="btn btn-secondary btn-sm" onclick="this.parentElement.remove()">
          Plus tard
        </button>
      `;
      
      document.body.appendChild(promptDiv);
      console.log('üîî Prompt de notification affich√©');
    }
  }

  hideNotificationPrompt() {
    const prompt = document.getElementById('notification-prompt');
    if (prompt) {
      prompt.remove();
    }
  }

  showNetworkStatus(message, type = 'info', timeout = 0) {
    const statusEl = document.getElementById('network-status');
    if (!statusEl) return;

    statusEl.className = `network-status alert alert-${type}`;
    statusEl.textContent = message;
    statusEl.style.display = 'block';

    if (timeout > 0) {
      setTimeout(() => {
        statusEl.style.display = 'none';
      }, timeout);
    }
  }

  showNotificationStatus(message, type = 'info', timeout = 5000) {
    console.log(`üì¢ Status: ${message} (${type})`);
    this.showNetworkStatus(message, type, timeout);
  }

  handleServiceWorkerMessage(event) {
    console.log('üì® Message du Service Worker:', event.data);
    
    if (event.data?.action === 'update-available') {
      this.showUpdateAvailable();
    }
  }

  // === UTILITAIRES ===
  urlB64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }

  showNotification(message, options = {}) {
    if (this.notificationPermission === 'granted') {
      new Notification('Conference Flow', {
        body: message,
        icon: '/static/icons/icon-192x192.png',
        badge: '/static/icons/badge-72x72.png',
        ...options
      });
    }
  }

  // M√©thodes publiques pour l'interaction avec l'interface
  async updateNotificationPreferences(preferences) {
    this.userPreferences = { ...this.userPreferences, ...preferences };
    
    // Mettre √† jour l'abonnement sur le serveur
    if (this.registration) {
      const subscription = await this.registration.pushManager.getSubscription();
      if (subscription) {
        await this.savePushSubscription(subscription);
      }
    }
  }

  getNotificationStatus() {
    return {
      permission: this.notificationPermission,
      supported: 'Notification' in window,
      pushSupported: 'serviceWorker' in navigator && 'PushManager' in window,
      preferences: this.userPreferences
    };
  }
}

// Initialiser la PWA au chargement
document.addEventListener('DOMContentLoaded', () => {
  console.log('üöÄ Chargement de Conference Flow PWA...');
  window.conferenceFlowPWA = new ConferenceFlowPWA();
});

// === FONCTIONS DEBUG GLOBALES AM√âLIOR√âES ===
window.debugPWA = {
  // Debug √©tat g√©n√©ral
  async checkState() {
    if (window.conferenceFlowPWA) {
      await window.conferenceFlowPWA.diagnosticPushState();
    } else {
      console.error('‚ùå ConferenceFlowPWA non initialis√©e');
    }
  },
  
  // Tester l'abonnement complet
  async testFullSubscription() {
    if (!window.conferenceFlowPWA) {
      console.error('‚ùå PWA non initialis√©e');
      return;
    }
    
    console.log('üß™ === TEST ABONNEMENT COMPLET ===');
    
    try {
      // 1. V√©rifier la cl√© VAPID
      await window.conferenceFlowPWA.loadVapidPublicKey();
      
      // 2. Demander permission
      const permissionSuccess = await window.conferenceFlowPWA.requestNotificationPermission();
      
      console.log('üß™ R√©sultat test:', permissionSuccess ? 'SUCC√àS' : '√âCHEC');
      
    } catch (error) {
      console.error('üß™ Erreur test:', error);
    }
  },
  
  // Forcer un nouvel abonnement
  async forceNewSubscription() {
    if (!window.conferenceFlowPWA || !window.conferenceFlowPWA.registration) {
      console.error('‚ùå Service worker non disponible');
      return;
    }
    
    try {
      console.log('üîÑ Suppression ancien abonnement...');
      const oldSubscription = await window.conferenceFlowPWA.registration.pushManager.getSubscription();
      if (oldSubscription) {
        await oldSubscription.unsubscribe();
        console.log('‚úÖ Ancien abonnement supprim√©');
      }
      
      console.log('üÜï Cr√©ation nouvel abonnement...');
      const success = await window.conferenceFlowPWA.ensurePushSubscription();
      console.log('üîÑ R√©sultat:', success ? 'SUCC√àS' : '√âCHEC');
      
    } catch (error) {
      console.error('‚ùå Erreur force subscription:', error);
    }
  },
  
  // V√©rifier la connectivit√© API
  async testApiConnection() {
    console.log('üåê Test connexion API...');
    
    try {
      const vapidResponse = await fetch('/api/vapid-public-key');
      console.log('üîë API VAPID:', vapidResponse.status, vapidResponse.statusText);
      
      const subscriptionResponse = await fetch('/api/push-subscription', {
        method: 'OPTIONS'  // Test CORS/disponibilit√©
      });
      console.log('üì° API Subscription:', subscriptionResponse.status, subscriptionResponse.statusText);
      
    } catch (error) {
      console.error('‚ùå Erreur test API:', error);
    }
  },
  
  // Test notification locale
  testLocalNotification() {
    if (window.conferenceFlowPWA) {
      window.conferenceFlowPWA.showNotification('üß™ Test notification locale', {
        body: 'Ceci est un test depuis la console',
        tag: 'debug-test'
      });
    }
  },
  
  // R√©initialiser compl√®tement
  async reset() {
    if (window.conferenceFlowPWA) {
      console.log('üîÑ R√©initialisation compl√®te...');
      
      // Supprimer l'abonnement existant
      if (window.conferenceFlowPWA.registration) {
        const subscription = await window.conferenceFlowPWA.registration.pushManager.getSubscription();
        if (subscription) {
          await subscription.unsubscribe();
          console.log('‚úÖ Abonnement supprim√©');
        }
      }
      
      // Recharger la cl√© VAPID
      await window.conferenceFlowPWA.loadVapidPublicKey();
      
      console.log('‚úÖ R√©initialisation termin√©e');
    }
  },
  
  checkInstallPrompt: () => {
    console.log('üîç Install prompt disponible:', !!window.conferenceFlowPWA?.installPrompt);
    console.log('üîç Service Worker enregistr√©:', !!window.conferenceFlowPWA?.registration);
    console.log('üîç Cl√© VAPID charg√©e:', !!window.conferenceFlowPWA?.vapidPublicKey);
  },
  
  forceInstall: () => {
    if (window.conferenceFlowPWA?.installPrompt) {
      window.conferenceFlowPWA.installApp();
    } else {
      console.log('‚ùå Pas de prompt d\'installation disponible');
    }
  },
  
  testNotification: () => {
    if (window.conferenceFlowPWA) {
      window.conferenceFlowPWA.showNotification('Test de notification !');
    }
  }
};

// Exposer les m√©thodes de notification am√©lior√©es
window.ConferenceFlowNotifications = {
  requestPermission: () => window.conferenceFlowPWA?.requestNotificationPermission(),
  getStatus: () => window.conferenceFlowPWA?.getNotificationStatus(),
  updatePreferences: (prefs) => window.conferenceFlowPWA?.updateNotificationPreferences(prefs),
  
  // Nouvelles m√©thodes de debug
  diagnostic: () => window.conferenceFlowPWA?.diagnosticPushState(),
  test: () => window.debugPWA.testFullSubscription(),
  reset: () => window.debugPWA.reset()
};

